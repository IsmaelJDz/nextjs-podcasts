{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ismaeljdz7/Documents/Cursos/Platzi/next/podcasts/pages/channel.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar _default = /*#__PURE__*/function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          channel = _this$props.channel,\n          audioClips = _this$props.audioClips,\n          series = _this$props.series;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }, __jsx(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }, \"Podcast\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, channel.title), __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }, \"Series\"), audioClips.map(function (clip) {\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }\n        }, \" \", clip.title, \" \");\n      }), __jsx(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, \"Ultimos podcasts\"), series.map(function (serie) {\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }\n        }, \" \", serie.title, \" \");\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var query, idChannel, _await$Promise$all, _await$Promise$all2, requestChannel, request, requestSeries, dataChannel, channel, dataAudio, audioClips, dataSeries, series;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = _ref.query;\n              idChannel = query.id;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\"))]));\n\n            case 4:\n              _await$Promise$all = _context.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 3);\n              requestChannel = _await$Promise$all2[0];\n              request = _await$Promise$all2[1];\n              requestSeries = _await$Promise$all2[2];\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(requestChannel.json());\n\n            case 11:\n              dataChannel = _context.sent;\n              channel = dataChannel.body.channel;\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(request.json());\n\n            case 15:\n              dataAudio = _context.sent;\n              audioClips = dataAudio.body.audio_clips;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(requestSeries.json());\n\n            case 19:\n              dataSeries = _context.sent;\n              series = dataSeries.body.channels;\n              return _context.abrupt(\"return\", {\n                channel: channel,\n                audioClips: audioClips,\n                series: series\n              });\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["/Users/ismaeljdz7/Documents/Cursos/Platzi/next/podcasts/pages/channel.js"],"names":["props","channel","audioClips","series","title","map","clip","serie","query","idChannel","id","Promise","all","fetch","requestChannel","request","requestSeries","json","dataChannel","body","dataAudio","audio_clips","dataSeries","channels","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAsBW;AAAA;;AAAA,wBACiC,KAAKA,KADtC;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUC,UADV,eACUA,UADV;AAAA,UACsBC,MADtB,eACsBA,MADtB;AAGP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,OAAO,CAACG,KAAb,CAFF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKGF,UAAU,CAACG,GAAX,CAAe,UAAAC,IAAI;AAAA,eAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAOA,IAAI,CAACF,KAAZ,MADkB;AAAA,OAAnB,CALH,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATF,EAUGD,MAAM,CAACE,GAAP,CAAW,UAAAE,KAAK;AAAA,eACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAOA,KAAK,CAACH,KAAb,MADe;AAAA,OAAhB,CAVH,CADF;AAkBD;;;;;;;;;;AA1C8BI,cAAAA,K,QAAAA,K;AACzBC,cAAAA,S,GAAYD,KAAK,CAACE,E;;+CAE+BC,OAAO,CAACC,GAAR,CAAY,CAC/DC,KAAK,8CAAuCJ,SAAvC,EAD0D,EAE/DI,KAAK,8CAAuCJ,SAAvC,kBAF0D,EAG/DI,KAAK,8CAAuCJ,SAAvC,qBAH0D,CAAZ,C;;;;;AAAhDK,cAAAA,c;AAAgBC,cAAAA,O;AAASC,cAAAA,a;;+CAMNF,cAAc,CAACG,IAAf,E;;;AAApBC,cAAAA,W;AACAjB,cAAAA,O,GAAUiB,WAAW,CAACC,IAAZ,CAAiBlB,O;;+CAETc,OAAO,CAACE,IAAR,E;;;AAAlBG,cAAAA,S;AACAlB,cAAAA,U,GAAakB,SAAS,CAACD,IAAV,CAAeE,W;;+CAETL,aAAa,CAACC,IAAd,E;;;AAAnBK,cAAAA,U;AACAnB,cAAAA,M,GAASmB,UAAU,CAACH,IAAX,CAAgBI,Q;+CAEtB;AAAEtB,gBAAAA,OAAO,EAAPA,OAAF;AAAWC,gBAAAA,UAAU,EAAVA,UAAX;AAAuBC,gBAAAA,MAAM,EAANA;AAAvB,e;;;;;;;;;;;;EAnBkBqB,KAAK,CAACC,S","sourcesContent":["export default class extends React.Component {\n  static async getInitialProps({ query }) {\n    let idChannel = query.id;\n\n    let [requestChannel, request, requestSeries] = await Promise.all([\n      fetch(`https://api.audioboom.com/channels/${idChannel}`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n      fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n    ]);\n\n    let dataChannel = await requestChannel.json();\n    let channel = dataChannel.body.channel;\n\n    let dataAudio = await request.json();\n    let audioClips = dataAudio.body.audio_clips;\n\n    let dataSeries = await requestSeries.json();\n    let series = dataSeries.body.channels;\n\n    return { channel, audioClips, series };\n  }\n\n  render() {\n    const { channel, audioClips, series } = this.props;\n\n    return (\n      <div>\n        <header>Podcast</header>\n        <h1>{channel.title}</h1>\n\n        <h2>Series</h2>\n        {audioClips.map(clip => (\n          <div> {clip.title} </div>\n        ))}\n\n        <h2>Ultimos podcasts</h2>\n        {series.map(serie => (\n          <div> {serie.title} </div>\n        ))}\n\n        \n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}